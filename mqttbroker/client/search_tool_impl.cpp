/* search_tool_impl.cpp

 Generated by phxrpc_pb2tool from search.proto

*/

#include "search_tool_impl.h"

#include "phxrpc/file.h"

#include "mqttbroker.pb.h"
#include "search_client.h"


using namespace phxrpc;
using namespace std;


SearchToolImpl::SearchToolImpl() {
}

SearchToolImpl::~SearchToolImpl() {
}

int SearchToolImpl::PHXEcho(phxrpc::OptMap &opt_map) {
    google::protobuf::StringValue req;
    google::protobuf::StringValue resp;

    if (nullptr == opt_map.Get('s')) return -1;

    req.set_value(opt_map.Get('s'));

    SearchClient client;
    int ret{client.PHXEcho(req, &resp)};
    printf("%s return %d\n", __func__, ret);
    printf("resp: {\n%s}\n", resp.DebugString().c_str());

    return ret;
}

int SearchToolImpl::PhxHttpPublish(phxrpc::OptMap &opt_map) {
    phxqueue_phxrpc::mqttbroker::HttpPublishPb req;
    phxqueue_phxrpc::mqttbroker::HttpPubackPb resp;

    const char *session_id_string{opt_map.Get('e')};
    if (!session_id_string) return -1;
    uint64_t session_id{strtoull(session_id_string, nullptr, 16)};

    uint32_t dup{0u};
    if (!opt_map.GetUInt('d', &dup)) dup = 0;
    uint32_t qos{0u};
    if (!opt_map.GetUInt('q', &qos)) qos = 0;
    uint32_t retain{0u};
    if (!opt_map.GetUInt('r', &retain)) retain = 0;

    if (nullptr == opt_map.Get('t')) return -1;
    uint32_t packet_identifier{0u};
    if (!opt_map.GetUInt('p', &packet_identifier)) packet_identifier = 0;
    if (nullptr == opt_map.Get('s')) return -1;

    req.set_session_id(session_id);

    req.mutable_mqtt_publish()->set_dup(0 != dup);
    req.mutable_mqtt_publish()->set_qos(qos);
    req.mutable_mqtt_publish()->set_retain(0 != retain);

    req.mutable_mqtt_publish()->set_topic_name(opt_map.Get('t'));
    req.mutable_mqtt_publish()->set_packet_identifier(packet_identifier);
    req.mutable_mqtt_publish()->set_content(opt_map.Get('s'));

    SearchClient client;
    int ret{client.PhxHttpPublish(req, &resp)};
    printf("%s return %d\n", __func__, ret);
    printf("resp: {\n%s}\n", resp.DebugString().c_str());

    return ret;
}

int SearchToolImpl::PhxMqttConnect(phxrpc::OptMap &opt_map) {
    SearchClient client;
    int ret{-1};

    phxqueue_phxrpc::mqttbroker::MqttConnectPb req;
    phxqueue_phxrpc::mqttbroker::MqttConnackPb resp;

    if (nullptr == opt_map.Get('l')) return -1;

    req.set_client_identifier(opt_map.Get('l'));
    req.set_proto_name("MQTT");
    req.set_proto_level(4);
    req.set_keep_alive(0);

    ret = client.PhxMqttConnect(req, &resp);
    printf("%s return %d\n", __func__, ret);
    printf("resp: {\n%s}\n", resp.DebugString().c_str());

    return ret;
}

int SearchToolImpl::PhxMqttPublish(phxrpc::OptMap &opt_map) {
    SearchClient client;
    int ret{-1};

    phxqueue_phxrpc::mqttbroker::MqttConnectPb connect_req;
    phxqueue_phxrpc::mqttbroker::MqttConnackPb connect_resp;

    if (nullptr == opt_map.Get('l')) return -1;

    connect_req.set_client_identifier(opt_map.Get('l'));
    connect_req.set_proto_name("MQTT");
    connect_req.set_proto_level(4);
    connect_req.set_keep_alive(0);

    ret = client.PhxMqttConnect(connect_req, &connect_resp);
    printf("%s connect return %d\n", __func__, ret);
    printf("connect resp: {\n%s}\n", connect_resp.DebugString().c_str());

    phxqueue_phxrpc::mqttbroker::MqttPublishPb req;
    google::protobuf::Empty resp;

    uint32_t dup{0u};
    if (!opt_map.GetUInt('d', &dup)) dup = 0;
    uint32_t qos{0u};
    if (!opt_map.GetUInt('q', &qos)) qos = 0;
    uint32_t retain{0u};
    if (!opt_map.GetUInt('r', &retain)) retain = 0;

    if (nullptr == opt_map.Get('t')) return -1;
    uint32_t packet_identifier{0u};
    if (!opt_map.GetUInt('p', &packet_identifier)) packet_identifier = 0;
    if (nullptr == opt_map.Get('s')) return -1;

    req.set_dup(0 != dup);
    req.set_qos(qos);
    req.set_retain(0 != retain);

    req.set_topic_name(opt_map.Get('t'));
    req.set_packet_identifier(packet_identifier);
    req.set_content(opt_map.Get('s'));

    ret = client.PhxMqttPublish(req, &resp);
    printf("%s return %d\n", __func__, ret);
    printf("resp: {\n%s}\n", resp.DebugString().c_str());

    return ret;
}

int SearchToolImpl::PhxMqttPuback(phxrpc::OptMap &opt_map) {
    SearchClient client;
    int ret{-1};

    phxqueue_phxrpc::mqttbroker::MqttConnectPb connect_req;
    phxqueue_phxrpc::mqttbroker::MqttConnackPb connect_resp;

    if (nullptr == opt_map.Get('l')) return -1;

    connect_req.set_client_identifier(opt_map.Get('l'));
    connect_req.set_proto_name("MQTT");
    connect_req.set_proto_level(4);
    connect_req.set_keep_alive(0);

    ret = client.PhxMqttConnect(connect_req, &connect_resp);
    printf("%s connect return %d\n", __func__, ret);
    printf("connect resp: {\n%s}\n", connect_resp.DebugString().c_str());

    phxqueue_phxrpc::mqttbroker::MqttPubackPb req;
    google::protobuf::Empty resp;

    uint32_t packet_identifier{0u};
    if (!opt_map.GetUInt('p', &packet_identifier)) packet_identifier = 0;

    req.set_packet_identifier(packet_identifier);

    ret = client.PhxMqttPuback(req, &resp);
    printf("%s return %d\n", __func__, ret);

    return ret;
}

int SearchToolImpl::PhxMqttPubrec(phxrpc::OptMap &opt_map) {
    phxqueue_phxrpc::mqttbroker::MqttPubrecPb req;
    google::protobuf::Empty resp;

    // TODO: fill req from opt_map

    SearchClient client;
    int ret{client.PhxMqttPubrec(req, &resp)};
    printf("%s return %d\n", __func__, ret);
    printf("resp: {\n%s}\n", resp.DebugString().c_str());

    return ret;
}

int SearchToolImpl::PhxMqttPubrel(phxrpc::OptMap &opt_map) {
    phxqueue_phxrpc::mqttbroker::MqttPubrelPb req;
    google::protobuf::Empty resp;

    // TODO: fill req from opt_map

    SearchClient client;
    int ret{client.PhxMqttPubrel(req, &resp)};
    printf("%s return %d\n", __func__, ret);
    printf("resp: {\n%s}\n", resp.DebugString().c_str());

    return ret;
}

int SearchToolImpl::PhxMqttPubcomp(phxrpc::OptMap &opt_map) {
    phxqueue_phxrpc::mqttbroker::MqttPubcompPb req;
    google::protobuf::Empty resp;

    // TODO: fill req from opt_map

    SearchClient client;
    int ret{client.PhxMqttPubcomp(req, &resp)};
    printf("%s return %d\n", __func__, ret);
    printf("resp: {\n%s}\n", resp.DebugString().c_str());

    return ret;
}

int SearchToolImpl::PhxMqttSubscribe(phxrpc::OptMap &opt_map) {
    SearchClient client;
    int ret{-1};

    phxqueue_phxrpc::mqttbroker::MqttConnectPb connect_req;
    phxqueue_phxrpc::mqttbroker::MqttConnackPb connect_resp;

    if (nullptr == opt_map.Get('l')) return -1;

    connect_req.set_client_identifier(opt_map.Get('l'));
    connect_req.set_proto_name("MQTT");
    connect_req.set_proto_level(4);
    connect_req.set_keep_alive(0);

    ret = client.PhxMqttConnect(connect_req, &connect_resp);
    printf("%s connect return %d\n", __func__, ret);
    printf("connect resp: {\n%s}\n", connect_resp.DebugString().c_str());

    phxqueue_phxrpc::mqttbroker::MqttSubscribePb req;
    phxqueue_phxrpc::mqttbroker::MqttSubackPb resp;

    uint32_t packet_identifier{0u};
    if (!opt_map.GetUInt('p', &packet_identifier)) packet_identifier = 0;
    if (nullptr == opt_map.Get('t')) return -1;
    if (nullptr == opt_map.Get('q')) return -1;

    req.set_packet_identifier(packet_identifier);

    vector<string> topic_filters;
    FileUtils::StrSplitList(opt_map.Get('t'), ",", topic_filters);
    google::protobuf::RepeatedPtrField<string> temp_topic_filters(
            topic_filters.begin(), topic_filters.end());
    req.mutable_topic_filters()->Swap(&temp_topic_filters);
    printf("topics ");
    for_each(req.topic_filters().begin(), req.topic_filters().end(),
            [](const string &s) {
                printf("%s,", s.c_str());
            });
    printf("\n");

    vector<string> qoss;
    FileUtils::StrSplitList(opt_map.Get('q'), ",", qoss);
    vector<uint32_t> qoss2;
    for_each(qoss.begin(), qoss.end(),
             [&qoss2](const string &s) { qoss2.push_back(strtoul(s.c_str(), nullptr, 10)); });
    google::protobuf::RepeatedField<uint32_t> temp_qoss(
            qoss2.begin(), qoss2.end());
    req.mutable_qoss()->Swap(&temp_qoss);
    printf("qos ");
    for_each(req.qoss().begin(), req.qoss().end(),
            [](const uint32_t &u) {
                printf("%u,", u);
            });
    printf("\n");

    ret = client.PhxMqttSubscribe(req, &resp);
    printf("%s return %d\n", __func__, ret);
    printf("resp: {\n%s}\n", resp.DebugString().c_str());

    return 0;
}

int SearchToolImpl::PhxMqttUnsubscribe(phxrpc::OptMap &opt_map) {
    SearchClient client;
    int ret{-1};

    phxqueue_phxrpc::mqttbroker::MqttConnectPb connect_req;
    phxqueue_phxrpc::mqttbroker::MqttConnackPb connect_resp;

    if (nullptr == opt_map.Get('l')) return -1;

    connect_req.set_client_identifier(opt_map.Get('l'));
    connect_req.set_proto_name("MQTT");
    connect_req.set_proto_level(4);
    connect_req.set_keep_alive(0);

    ret = client.PhxMqttConnect(connect_req, &connect_resp);
    printf("%s connect return %d\n", __func__, ret);
    printf("connect resp: {\n%s}\n", connect_resp.DebugString().c_str());

    phxqueue_phxrpc::mqttbroker::MqttUnsubscribePb req;
    phxqueue_phxrpc::mqttbroker::MqttUnsubackPb resp;

    uint32_t packet_identifier{0u};
    if (!opt_map.GetUInt('p', &packet_identifier)) packet_identifier = 0;
    if (nullptr == opt_map.Get('t')) return -1;

    req.set_packet_identifier(packet_identifier);

    vector<string> topic_filters;
    FileUtils::StrSplitList(opt_map.Get('t'), ",", topic_filters);
    google::protobuf::RepeatedPtrField<string> temp_topic_filters(
            topic_filters.begin(), topic_filters.end());
    req.mutable_topic_filters()->Swap(&temp_topic_filters);

    ret = client.PhxMqttUnsubscribe(req, &resp);
    printf("%s return %d\n", __func__, ret);
    printf("resp: {\n%s}\n", resp.DebugString().c_str());

    return 0;
}

int SearchToolImpl::PhxMqttPing(phxrpc::OptMap &opt_map) {
    SearchClient client;
    int ret{-1};

    phxqueue_phxrpc::mqttbroker::MqttConnectPb connect_req;
    phxqueue_phxrpc::mqttbroker::MqttConnackPb connect_resp;

    if (nullptr == opt_map.Get('l')) return -1;

    connect_req.set_client_identifier(opt_map.Get('l'));
    connect_req.set_proto_name("MQTT");
    connect_req.set_proto_level(4);
    connect_req.set_keep_alive(0);

    ret = client.PhxMqttConnect(connect_req, &connect_resp);
    printf("%s connect return %d\n", __func__, ret);
    printf("connect resp: {\n%s}\n", connect_resp.DebugString().c_str());

    phxqueue_phxrpc::mqttbroker::MqttPingreqPb req;
    phxqueue_phxrpc::mqttbroker::MqttPingrespPb resp;

    ret = client.PhxMqttPing(req, &resp);
    printf("%s return %d\n", __func__, ret);
    printf("resp: {\n%s}\n", resp.DebugString().c_str());

    return 0;
}

int SearchToolImpl::PhxMqttDisconnect(phxrpc::OptMap &opt_map) {
    SearchClient client;
    int ret{-1};

    phxqueue_phxrpc::mqttbroker::MqttConnectPb connect_req;
    phxqueue_phxrpc::mqttbroker::MqttConnackPb connect_resp;

    if (nullptr == opt_map.Get('l')) return -1;

    connect_req.set_client_identifier(opt_map.Get('l'));
    connect_req.set_proto_name("MQTT");
    connect_req.set_proto_level(4);
    connect_req.set_keep_alive(0);

    ret = client.PhxMqttConnect(connect_req, &connect_resp);
    printf("%s connect return %d\n", __func__, ret);
    printf("connect resp: {\n%s}\n", connect_resp.DebugString().c_str());

    phxqueue_phxrpc::mqttbroker::MqttDisconnectPb req;
    google::protobuf::Empty resp;

    ret = client.PhxMqttDisconnect(req, &resp);
    printf("%s return %d\n", __func__, ret);

    return ret;
}

